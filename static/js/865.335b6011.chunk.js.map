{"version":3,"file":"static/js/865.335b6011.chunk.js","mappings":"yPAGA,SAASA,EAAuBC,EAAUC,GACtC,OAAOD,EAAWC,IAAUC,EAAAA,EAAAA,MAAcC,EAAAA,GAC9C,CACO,IAAMC,EAAmB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAC5B,SAAAA,EAAYJ,EAAUS,EAAMC,EAAMC,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAR,GAAAG,EAAAM,KAAA,KACjCb,EAAUS,EAAMC,EAAMC,EAChC,CA+CC,OA/CAG,EAAAA,EAAAA,GAAAV,EAAA,EAAAW,IAAA,OAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KACC,yBAAAJ,EAAAU,MAAA,KAAAC,UAAA,EAFA,IAEA,CAAAb,IAAA,iBAAAC,MACD,WACI,IAAMN,EAAOmB,KAAKnB,KAAMV,EAAW6B,KAAK7B,SAAUS,EAAOoB,KAAKpB,KAC9D,GAAIC,EACA,MAAO,CACHV,SAAU,CACN8B,EAAG/B,EAAuBC,EAAS8B,EAAGrB,EAAKsB,OAC3CC,EAAGjC,EAAuBC,EAASgC,EAAGvB,EAAKwB,UAKnD,IAAMC,EArBL,GAqBazB,EAAKsB,MAAcI,EArBhC,GAqBwC1B,EAAKwB,OAAeG,EAAOC,KAAKC,MArB3D,GAqBiEpC,EAAAA,EAAAA,OAAsBqC,EArB3E,IAqBgFrC,EAAAA,EAAAA,MAAcC,EAAAA,IACxH,OAAQiC,GACJ,KAAK,EACD,MAAO,CACHpC,SAAU,CACN8B,EAAG9B,EAAS8B,EAAIS,EAAIL,EACpBF,EAAGhC,EAASgC,EAAIG,IAG5B,KAAK,EACD,MAAO,CACHnC,SAAU,CACN8B,EAAG9B,EAAS8B,EAAII,EAChBF,EAAGhC,EAASgC,EAAIO,EAAIJ,IAGhC,KAAK,EACD,MAAO,CACHnC,SAAU,CACN8B,EAAG9B,EAAS8B,EAAIS,EAAIL,EACpBF,EAAGhC,EAASgC,EAAIG,IAI5B,QACI,MAAO,CACHnC,SAAU,CACN8B,EAAG9B,EAAS8B,EAAII,EAChBF,EAAGhC,EAASgC,EAAIO,EAAIJ,IAK5C,KAAC/B,CAAA,CAlD2B,CAASoC,EAAAA,GCL5BC,EAA4B,oBAAAA,KAAA7B,EAAAA,EAAAA,GAAA,KAAA6B,EAAA,CAGpC,OAHoC3B,EAAAA,EAAAA,GAAA2B,EAAA,EAAA1B,IAAA,WAAAC,MACrC,SAAShB,EAAUS,EAAMC,EAAMC,GAC3B,OAAO,IAAIP,EAAoBJ,EAAUS,EAAMC,EAAMC,EACzD,KAAC8B,CAAA,CAHoC,E,+ECD5BD,EAAgB,WACzB,SAAAA,EAAYxC,EAAUS,EAAMC,EAAMC,IAASC,EAAAA,EAAAA,GAAA,KAAA4B,GACvCX,KAAK7B,SAAWA,EAChB6B,KAAKpB,KAAOA,EACZoB,KAAKnB,KAAOA,EACZmB,KAAKlB,QAAUA,CACnB,CAIC,OAJAG,EAAAA,EAAAA,GAAA0B,EAAA,EAAAzB,IAAA,SAAAC,MACD,SAAOhB,EAAUS,GACboB,KAAK7B,SAAWA,EAChB6B,KAAKpB,KAAOA,CAChB,KAAC+B,CAAA,CAVwB,E","sources":["../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n            switch (side) {\n                case 0:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case 1:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case 2:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case 3:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n","import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["randomSquareCoordinate","position","offset","getRandom","halfRandom","EmittersSquareShape","_EmitterShapeBase","_inherits","_super","_createSuper","size","fill","options","_classCallCheck","call","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","this","x","width","y","height","halfW","halfH","side","Math","floor","v","EmitterShapeBase","EmittersSquareShapeGenerator"],"sourceRoot":""}