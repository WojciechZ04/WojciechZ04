{"version":3,"file":"static/js/9698.64259aef.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-text/browser/Utils.js","../node_modules/@tsparticles/shape-text/browser/TextDrawer.js","../node_modules/@tsparticles/shape-text/browser/index.js"],"sourcesContent":["import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { validTypes } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    const { TextDrawer } = await import(\"./TextDrawer.js\");\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n"],"names":["double","half","drawLine","context","line","radius","opacity","index","fill","pos","x","length","y","diameter","fillText","strokeText","validTypes","TextDrawer","_classCallCheck","_createClass","key","value","data","_character$style","_character$weight","_character$font","particle","character","shapeData","textData","undefined","text","itemFromSingleOrMultiple","randomIndexData","style","weight","size","Math","round","font","shapeFill","lines","split","concat","globalAlpha","i","drawText","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","container","options","shapeOptions","promises","wrap","_context","prev","next","actualOptions","find","t","isInArray","particles","shape","type","map","executeOnSingleOrMultiple","push","loadFont","Promise","all","stop","_x","apply","arguments","includes","loadTextShape","_loadTextShape","engine","refresh","_yield$import","_args","sent","addShape"],"sourceRoot":""}