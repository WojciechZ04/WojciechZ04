{"version":3,"file":"static/js/7735.5f409951.chunk.js","mappings":"2PAEMA,EAAU,IAAkBC,EAAH,EAAcC,KAAKC,GACrCC,EAAmB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAC5B,SAAAA,EAAYK,EAAUC,EAAMC,EAAMC,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAT,GAAAG,EAAAO,KAAA,KACjCL,EAAUC,EAAMC,EAAMC,EAChC,CAyBC,OAzBAG,EAAAA,EAAAA,GAAAX,EAAA,EAAAY,IAAA,OAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KACC,yBAAAJ,EAAAU,MAAA,KAAAC,UAAA,EAFA,IAEA,CAAAb,IAAA,iBAAAC,MACD,WACU,IAcOa,EAAGC,EAAGC,EAdbtB,EAAOuB,KAAKvB,KAAMC,EAAOsB,KAAKtB,KAAMF,EAAWwB,KAAKxB,SAckEyB,EAtB/C,GAsBwDxB,EAAKyB,MAAXC,EAtBlD,GAsB2E1B,EAAK2B,OAAgBC,EAdzF,SAACR,EAAGC,GACpF,IAAMQ,GAAIC,EAAAA,EAAAA,MAAcxC,EAASgC,EAAQ9B,KAAKuC,KAAMV,EAAID,EAAK5B,KAAKwC,IAAIzC,EAAWsC,IAAKI,GAAIH,EAAAA,EAAAA,MAC1F,OAAIG,EAAI3C,EACGgC,EAEFW,EAAIC,GACF1C,KAAKC,GAAK6B,EAEZW,EAAIC,IACF1C,KAAKC,GAAK6B,GAGTA,CAEhB,CAA2La,CAAcX,EAAGE,GAAIU,GAA7Ld,EAAsNM,GAA5NR,EAAsNI,IAAnNH,EAAsNK,GAA/LlC,KAAK6C,KAAK7C,KAAA8C,IAACjB,EAAI7B,KAAK+C,IAAIjB,GAtBI,GAsBgB9B,KAAA8C,IAAIlB,EAAI5B,KAAKgD,IAAIlB,GAtBjC,KAsBoLmB,EAAexC,EAAOmC,EAAY5C,KAAK6C,MAAKP,EAAAA,EAAAA,OAAeM,EAClT,MAAO,CACHrC,SAAU,CACNqB,EAAGrB,EAASqB,EAAIqB,EAAejD,KAAK+C,IAAIX,GACxCP,EAAGtB,EAASsB,EAAIoB,EAAejD,KAAKgD,IAAIZ,IAGpD,KAAClC,CAAA,CA5B2B,CAASgD,EAAAA,GCF5BC,EAA4B,oBAAAA,KAAAxC,EAAAA,EAAAA,GAAA,KAAAwC,EAAA,CAGpC,OAHoCtC,EAAAA,EAAAA,GAAAsC,EAAA,EAAArC,IAAA,WAAAC,MACrC,SAASR,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAIR,EAAoBK,EAAUC,EAAMC,EAAMC,EACzD,KAACyC,CAAA,CAHoC,E,+ECD5BD,EAAgB,WACzB,SAAAA,EAAY3C,EAAUC,EAAMC,EAAMC,IAASC,EAAAA,EAAAA,GAAA,KAAAuC,GACvCnB,KAAKxB,SAAWA,EAChBwB,KAAKvB,KAAOA,EACZuB,KAAKtB,KAAOA,EACZsB,KAAKrB,QAAUA,CACnB,CAIC,OAJAG,EAAAA,EAAAA,GAAAqC,EAAA,EAAApC,IAAA,SAAAC,MACD,SAAOR,EAAUC,GACbuB,KAAKxB,SAAWA,EAChBwB,KAAKvB,KAAOA,CAChB,KAAC0C,CAAA,CAVwB,E","sources":["../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n","import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["quarter","doublePI","Math","PI","EmittersCircleShape","_EmitterShapeBase","_inherits","_super","_createSuper","position","size","fill","options","_classCallCheck","call","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","x","y","theta","this","a","width","b","height","randomTheta","u","getRandom","atan","tan","v","double","generateTheta","maxRadius","sqrt","pow","cos","sin","randomRadius","EmitterShapeBase","EmittersCircleShapeGenerator"],"sourceRoot":""}